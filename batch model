batch model

package com.scb.axcessspringb.model;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.math.BigDecimal;
import java.util.List;

@Entity
@Table(name = "batches")
public class Batch {

    @Id
    private String id;

    @Column(nullable = false)
    private String name;

    private String status = "draft";

    private BigDecimal totalAmount = BigDecimal.ZERO;

    private LocalDate paymentDate;

    private String paymentType;
    private String currency = "INR";
    private String debitAccount;
    private String accountType;

    @OneToMany(mappedBy = "batch", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<PayrollEntry> entries;

    // Constructor for sample data
    public Batch(String id, String name, String status, String paymentType, String debitAccount, String accountType) {
        this.id = id;
        this.name = name;
        this.status = status;
        this.paymentType = paymentType;
        this.debitAccount = debitAccount;
        this.accountType = accountType;
    }

    // Default constructor required by JPA
    public Batch() {}

    // Getters and Setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public BigDecimal getTotalAmount() { return totalAmount; }
    public void setTotalAmount(BigDecimal totalAmount) { this.totalAmount = totalAmount; }

    public LocalDate getPaymentDate() { return paymentDate; }
    public void setPaymentDate(LocalDate paymentDate) { this.paymentDate = paymentDate; }

    public String getPaymentType() { return paymentType; }
    public void setPaymentType(String paymentType) { this.paymentType = paymentType; }

    public String getCurrency() { return currency; }
    public void setCurrency(String currency) { this.currency = currency; }

    public String getDebitAccount() { return debitAccount; }
    public void setDebitAccount(String debitAccount) { this.debitAccount = debitAccount; }

    public String getAccountType() { return accountType; }
    public void setAccountType(String accountType) { this.accountType = accountType; }

    public List<PayrollEntry> getEntries() { return entries; }
    public void setEntries(List<PayrollEntry> entries) { this.entries = entries; }
}

batch service

package com.scb.axcessspringb.service;

import com.scb.axcessspringb.dto.BatchDTO;
import com.scb.axcessspringb.dto.PayrollEntryDTO;
import com.scb.axcessspringb.model.Batch;
import com.scb.axcessspringb.model.PayrollEntry;
import com.scb.axcessspringb.repository.BatchRepository;
import com.scb.axcessspringb.repository.PayrollEntryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class BatchService {

    @Autowired private BatchRepository batchRepository;
    @Autowired private PayrollEntryRepository payrollEntryRepository;

    public List<BatchDTO> getAllBatches() {
        return batchRepository.findAll().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    public BatchDTO getBatchById(String id) {
        Batch batch = batchRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Batch not found"));
        return convertToDTO(batch);
    }

    public BatchDTO createBatch(BatchDTO batchDTO) {
        Batch batch = convertToEntity(batchDTO);
        batch.setTotalAmount(BigDecimal.ZERO);
        batchRepository.save(batch);
        return convertToDTO(batch);
    }

    public BatchDTO updateBatch(String id, BatchDTO batchDTO) {
        Batch existing = batchRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Batch not found"));

        existing.setPaymentDate(batchDTO.getPaymentDate());
        existing.setPaymentType(batchDTO.getPaymentType());
        existing.setDebitAccount(batchDTO.getDebitAccount());
        existing.setAccountType(batchDTO.getAccountType());
        existing.setStatus(batchDTO.getStatus());

        batchRepository.save(existing);
        return convertToDTO(existing);
    }

    public void deleteBatch(String id) {
        batchRepository.deleteById(id);
    }

    private BatchDTO convertToDTO(Batch batch) {
        BatchDTO dto = new BatchDTO();
        dto.setId(batch.getId());
        dto.setName(batch.getName());
        dto.setStatus(batch.getStatus());
        dto.setTotalAmount(batch.getTotalAmount());
        dto.setPaymentDate(batch.getPaymentDate());
        dto.setPaymentType(batch.getPaymentType());
        dto.setCurrency(batch.getCurrency());
        dto.setDebitAccount(batch.getDebitAccount());
        dto.setAccountType(batch.getAccountType());

        // Convert entries
        if (batch.getEntries() != null) {
            dto.setEntries(batch.getEntries().stream()
                    .map(this::convertToEntryDTO)
                    .collect(Collectors.toList()));
        }

        return dto;
    }

    private PayrollEntryDTO convertToEntryDTO(PayrollEntry entry) {
        PayrollEntryDTO dto = new PayrollEntryDTO();
        dto.setId(entry.getId());
        dto.setMethod(entry.getMethod());
        dto.setPayeeDetails(entry.getPayeeDetails());
        dto.setPayeeName(entry.getPayeeName());
        dto.setBankDetails(entry.getBankDetails());
        dto.setYourReference(entry.getYourReference());
        dto.setPaymentReference(entry.getPaymentReference());
        dto.setAmount(entry.getAmount());
        dto.setNotes(entry.getNotes());
        return dto;
    }

    private Batch convertToEntity(BatchDTO dto) {
        Batch batch = new Batch();
        batch.setId(dto.getId());
        batch.setName(dto.getName());
        batch.setStatus(dto.getStatus());
        batch.setPaymentDate(dto.getPaymentDate());
        batch.setPaymentType(dto.getPaymentType());
        batch.setDebitAccount(dto.getDebitAccount());
        batch.setAccountType(dto.getAccountType());
        return batch;
    }
}

batch dto

package com.scb.axcessspringb.dto;

import java.time.LocalDate;
import java.math.BigDecimal;
import java.util.List;

public class BatchDTO {
    private String id;
    private String name;
    private String status;
    private BigDecimal totalAmount;
    private LocalDate paymentDate;
    private String paymentType;
    private String currency;
    private String debitAccount;
    private String accountType;
    private List<PayrollEntryDTO> entries;

    // Getters and Setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public BigDecimal getTotalAmount() { return totalAmount; }
    public void setTotalAmount(BigDecimal totalAmount) { this.totalAmount = totalAmount; }

    public LocalDate getPaymentDate() { return paymentDate; }
    public void setPaymentDate(LocalDate paymentDate) { this.paymentDate = paymentDate; }

    public String getPaymentType() { return paymentType; }
    public void setPaymentType(String paymentType) { this.paymentType = paymentType; }

    public String getCurrency() { return currency; }
    public void setCurrency(String currency) { this.currency = currency; }

    public String getDebitAccount() { return debitAccount; }
    public void setDebitAccount(String debitAccount) { this.debitAccount = debitAccount; }

    public String getAccountType() { return accountType; }
    public void setAccountType(String accountType) { this.accountType = accountType; }

    public List<PayrollEntryDTO> getEntries() { return entries; }
    public void setEntries(List<PayrollEntryDTO> entries) { this.entries = entries; }
}

payroll controller

package com.scb.axcessspringb.controller;



import com.scb.axcessspringb.dto.PayrollEntryDTO;
import com.scb.axcessspringb.model.PayrollEntry;
import com.scb.axcessspringb.service.PayrollEntryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/payroll")
@CrossOrigin(origins = "http://localhost:3000")
public class PayrollEntryController {

    @Autowired private PayrollEntryService payrollService;

    @GetMapping("/batch/{batchId}")
    public ResponseEntity<List<PayrollEntryDTO>> getByBatch(@PathVariable String batchId) {
        List<PayrollEntry> entries = payrollService.getByBatch(batchId);
        List<PayrollEntryDTO> dtos = entries.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
        return ResponseEntity.ok(dtos);
    }

    @PostMapping("/batch/{batchId}")
    public ResponseEntity<PayrollEntryDTO> addEntry(@PathVariable String batchId, @RequestBody PayrollEntryDTO dto) {
        PayrollEntry entry = new PayrollEntry();
        entry.setMethod(dto.getMethod());
        entry.setPayeeDetails(dto.getPayeeDetails());
        entry.setPayeeName(dto.getPayeeName());
        entry.setBankDetails(dto.getBankDetails());
        entry.setYourReference(dto.getYourReference());
        entry.setPaymentReference(dto.getPaymentReference());
        entry.setAmount(dto.getAmount() != null ? dto.getAmount() : BigDecimal.ZERO);
        entry.setNotes(dto.getNotes());

        PayrollEntry saved = payrollService.createEntry(batchId, entry);

        return ResponseEntity.ok(convertToDTO(saved));
    }

    @PutMapping("/{id}")
    public ResponseEntity<PayrollEntryDTO> updateEntry(@PathVariable Long id, @RequestBody PayrollEntryDTO dto) {
        PayrollEntry entry = new PayrollEntry();
        entry.setMethod(dto.getMethod());
        entry.setPayeeDetails(dto.getPayeeDetails());
        entry.setPayeeName(dto.getPayeeName());
        entry.setBankDetails(dto.getBankDetails());
        entry.setYourReference(dto.getYourReference());
        entry.setPaymentReference(dto.getPaymentReference());
        entry.setAmount(dto.getAmount() != null ? dto.getAmount() : BigDecimal.ZERO);
        entry.setNotes(dto.getNotes());

        PayrollEntry updated = payrollService.updateEntry(id, entry);
        return ResponseEntity.ok(convertToDTO(updated));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEntry(@PathVariable Long id) {
        payrollService.deleteEntry(id);
        return ResponseEntity.noContent().build();
    }

    private PayrollEntryDTO convertToDTO(PayrollEntry entry) {
        PayrollEntryDTO dto = new PayrollEntryDTO();
        dto.setId(entry.getId());
        dto.setMethod(entry.getMethod());
        dto.setPayeeDetails(entry.getPayeeDetails());
        dto.setPayeeName(entry.getPayeeName());
        dto.setBankDetails(entry.getBankDetails());
        dto.setYourReference(entry.getYourReference());
        dto.setPaymentReference(entry.getPaymentReference());
        dto.setAmount(entry.getAmount());
        dto.setNotes(entry.getNotes());
        return dto;
    }
}
