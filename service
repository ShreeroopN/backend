package com.payment.approval.service;

import com.payment.approval.entity.PaymentBatch;
import com.payment.approval.exception.ResourceNotFoundException;
import com.payment.approval.repository.PaymentBatchRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ApproverService {

    @Autowired
    private PaymentBatchRepository batchRepository;

    // Approver can view all batches
    public List<PaymentBatch> getAllBatches() {
        return batchRepository.findAll();
    }

    public PaymentBatch getBatchById(String batchId) {
        return batchRepository.findByBatchId(batchId).orElse(null);
    }

    // Approve step by step
    public PaymentBatch approveBatch(String batchId, String approverName) {
        PaymentBatch batch = getBatchById(batchId);
        if (batch == null) return null;

        if (batch.getStatus() == PaymentBatch.BatchStatus.REJECTED
                || batch.getStatus() == PaymentBatch.BatchStatus.APPROVED) {
            return batch; // already closed
        }

        int nextLevel = batch.getCurrentApprovalLevel() + 1;

        if (nextLevel < batch.getRequiredApprovalLevel()) {
            batch.setCurrentApprovalLevel(nextLevel);
            batch.setStatus(PaymentBatch.BatchStatus.IN_PROGRESS);
        } else if (nextLevel == batch.getRequiredApprovalLevel()) {
            batch.setCurrentApprovalLevel(nextLevel);
            batch.setStatus(PaymentBatch.BatchStatus.APPROVED);
        }

        batch.setApprovedBy(approverName);
        batch.setApprovedAt(LocalDateTime.now());

        return batchRepository.save(batch);
    }

    // Reject batch
    public PaymentBatch rejectBatch(String batchId, String approverName) {
        PaymentBatch batch = getBatchById(batchId);
        if (batch == null) return null;

        batch.setStatus(PaymentBatch.BatchStatus.REJECTED);
        batch.setApprovedBy(approverName);
        batch.setApprovedAt(LocalDateTime.now());

        return batchRepository.save(batch);
    }
}
