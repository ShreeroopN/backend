package com.scb.axcessspringb.service;

import com.scb.axcessspringb.model.Approver;
import com.scb.axcessspringb.model.Batch;
import com.scb.axcessspringb.repository.ApproverRepository;
import com.scb.axcessspringb.repository.BatchRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ApproverService {

    @Autowired private ApproverRepository approverRepository;
    @Autowired private BatchRepository batchRepository;

    public List<Approver> getApproversForBatch(String batchId) {
        return approverRepository.findByBatch_Id(batchId);
    }

    public Approver approveBatch(Long approverId) {
        Approver approver = approverRepository.findById(approverId).orElse(null);
        if (approver == null) return null;

        approver.setApproved(true);
        approver.setRejected(false);
        approverRepository.save(approver); // save first

        Batch batch = approver.getBatch();

        // if all approvers of this batch are approved -> mark batch approved
        boolean allApproved = true;
        for (Approver a : approverRepository.findByBatch_Id(batch.getId())) {
            if (!a.isApproved()) {
                allApproved = false;
                break;
            }
        }
        if (allApproved) {
            batch.setStatus("approved");
            batchRepository.save(batch);
        }
        return approver;
    }

    public Approver rejectBatch(Long approverId) {
        Approver approver = approverRepository.findById(approverId).orElse(null);
        if (approver == null) return null;

        approver.setRejected(true);
        approver.setApproved(false);
        approverRepository.save(approver);

        Batch batch = approver.getBatch();
        batch.setStatus("rejected"); // one reject closes the batch
        batchRepository.save(batch);

        return approver;
    }
}
